package org.ime.vnime.view;

import android.content.Context;
import android.inputmethodservice.Keyboard;
import android.view.KeyEvent;

public class VnKeyboard extends Keyboard {

	public VnKeyboard(Context context, int xmlLayoutResId) {
		super(context, xmlLayoutResId);
	}

	public VnKeyboard(Context context, int xmlLayoutResId, int modeId) {
		super(context, xmlLayoutResId, modeId);
	}

	public VnKeyboard(Context context, int layoutTemplateResId,
			CharSequence characters, int columns, int horizontalPadding) {
		super(context, layoutTemplateResId, characters, columns,
				horizontalPadding);
	}
	
	public static final int KEYCODE_ENTER = -10;
	
	/**
	 * Convert soft key code (defined in soft keyboard) to hard key code
	 * (defined in {@link android.view.KeyEvent KeyEvent})
	 * @param softCode Key code generated by soft keyboard
	 * @return The appropriate hard key code
	 */
	public static int softCodeToHardCode(int softCode) {
		if (softCode >= '0' && softCode <= '9')
			return softCode - '0' + KeyEvent.KEYCODE_0;
		if (softCode >= 'a' && softCode <= 'z')
			return softCode - 'a' + KeyEvent.KEYCODE_A;
		switch (softCode) {
		case KEYCODE_SHIFT:
			return KeyEvent.KEYCODE_SHIFT_LEFT;
		case KEYCODE_ALT:
			return KeyEvent.KEYCODE_ALT_LEFT;
		case KEYCODE_DELETE:
			return KeyEvent.KEYCODE_DEL;
		case KEYCODE_ENTER:
			return KeyEvent.KEYCODE_ENTER;
		case ',':
			return KeyEvent.KEYCODE_COMMA;
		case '@':
			return KeyEvent.KEYCODE_AT;
		case '=':
			return KeyEvent.KEYCODE_EQUALS;
		case '`':
			return KeyEvent.KEYCODE_GRAVE ;
		case '[':
			return KeyEvent.KEYCODE_LEFT_BRACKET;
		case ']':
			return KeyEvent.KEYCODE_RIGHT_BRACKET;
		case '-':
			return KeyEvent.KEYCODE_MINUS;
		case '+':
			return KeyEvent.KEYCODE_PLUS;
		case '.':
			return KeyEvent.KEYCODE_PERIOD;
		case ';':
			return KeyEvent.KEYCODE_SEMICOLON;
		case '/':
			return KeyEvent.KEYCODE_SLASH;
		case '\\':
			return KeyEvent.KEYCODE_BACKSLASH;
		case ' ':
			return KeyEvent.KEYCODE_SPACE;
		case '\t':
			return KeyEvent.KEYCODE_TAB;
		case '*':
			return KeyEvent.KEYCODE_STAR;
		case '#':
			return KeyEvent.KEYCODE_POUND;
		case '^':
			return KeyEvent.KEYCODE_POWER;
		case '\'':
			return KeyEvent.KEYCODE_APOSTROPHE;
		}
		
		int maxKeyCode = KeyEvent.getMaxKeyCode();
		if (softCode > 0)
			return softCode + maxKeyCode;
		
		return softCode;
	}

}
